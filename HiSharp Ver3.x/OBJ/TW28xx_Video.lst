C51 COMPILER V9.60.0.0   TW28XX_VIDEO                                                      07/14/2021 16:13:00 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE TW28XX_VIDEO
OBJECT MODULE PLACED IN .\OBJ\TW28xx_Video.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE TW28xx_Video.c COMPACT OPTIMIZE(9,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT
                    -(.\OBJ\TW28xx_Video.lst) TABS(2) OBJECT(.\OBJ\TW28xx_Video.obj)

line level    source

   1          //  **************************************************************************
   2          //
   3          //       Copyright (c) 1992-2006 Professonal Computer Technology Co., Ltd
   4          //
   5          //      All rights are reserved. Reproduction in whole or in parts is
   6          //  prohibited without the prior written consent of the copyright owner.
   7          //  --------------------------------------------------------------------------
   8          //
   9          //  Module: TW28xx_Video.C
  10          //
  11          //  Purpose: Implementation of TW28xx Video.
  12          //
  13          //  Version: 0.01                                   2006/12/11 08:22¤U¤È
  14          //
  15          //  Compiler: Keil 8051 C Compiler v7.2
  16          //
  17          //  Reference:
  18          //
  19          //
  20          //
  21          //  --------------------------------------------------------------------------
  22          //  Modification:
  23          //
  24          //  R0.01 2006/12/11 08:22¤U¤È Phoenix Chuang
  25          //  Reason:
  26          //    1. Original.
  27          //  Solution:
  28          //  
  29          //  **************************************************************************
  30          //  -----------------------------------
  31          //      Header Files
  32          //  ----------------------------------- 
  33          #include "Types.h"
  34          #include "TW28xx_Video.h"
  35          #include "BusCtrl.h"
  36          #include "CommandShell.h"
  37          #include "Win_Table.h"
  38          #include "Timer.h"//andy 20100209 add
  39          #include "TW2835_Init.h"
  40          #include "Main.h"
  41          
  42          //  ------------------------------------
  43          //      Macro Definitions
  44          //  ------------------------------------ 
  45          #define H_FILTER  0x0000
  46          
  47          //  ------------------------------------
  48          //      Type Definitions
  49          //  ------------------------------------
  50          
  51          
  52          //  ------------------------------------
  53          //      Variables Definitions
  54          //  ------------------------------------
C51 COMPILER V9.60.0.0   TW28XX_VIDEO                                                      07/14/2021 16:13:00 PAGE 2   

  55          code U16 XWinAttr_RegAddr[] = {0x0111, 0x0119, 0x0121, 0x0129, 
  56                           0x0114, 0x011C, 0x0124, 0x012C };
  57          
  58          code U16 XWinPOP_RegAddr[]  = {0x0110, 0x0118, 0x0120, 0x0128, 
  59                           0x0113, 0x011B, 0x0123, 0x012B };
  60          
  61          code U16 YWinAttr_RegAddr[] = {0x0161, 0x0164, 0x0167, 0x016A};
  62          
  63          
  64          extern BYTE xdata Original_selwintype;//Kane @HS 2007 0724 Ver3.4
  65          
  66          extern BYTE TW2837IDCheck;
  67          
  68          //  ------------------------------------
  69          //      Function Prototypes
  70          //  ------------------------------------
  71          
  72          // ===========================================================================
  73          //                      Parallel function description
  74          // ===========================================================================
  75          //
  76          // Auto Detectation Video Format 
  77          //
  78          U8 PCT_DetectVideoFormat(U8 _ch)
  79          {
  80   1        register U8 tmpSta;
  81   1      //  int _delay;
  82   1        // Waitting Color Lock
  83   1        //Kane Modified>>>>
  84   1      #if 1
  85   1        tmpSta = 0; 
  86   1      
  87   1        if(TW2837IDCheck==TRUE)
  88   1          {
  89   2        if( (TW28_ReadByte(0, SENSORCHANNEL<<4)&0xC0) == 0x40) 
  90   2          {
  91   3          tmpSta = TW28_ReadByte(0, (_ch << 4)|0x0E);
  92   3          }
  93   2      
  94   2        if(tmpSta == 0)
  95   2          return NONE_SYSTEM;
  96   2      
  97   2        tmpSta &= 0x70;
  98   2        tmpSta >>= 4;
  99   2      
 100   2        if((tmpSta==0)||(tmpSta==3))
 101   2          {
 102   3          return NTSC;
 103   3          }
 104   2        else
 105   2          {
 106   3          return PAL;
 107   3            }
 108   2        
 109   2        //return ((tmpSta==0)||(tmpSta==3))  ? NTSC: PAL; 
 110   2          }
 111   1        else
 112   1          {
 113   2          if( (TW28_ReadByte(0, SENSORCHANNEL<<4)&0x0F) == 0x0F) 
 114   2            tmpSta = TW28_ReadByte(0, _ch << 4);
 115   2          
 116   2          if(tmpSta == 0)
C51 COMPILER V9.60.0.0   TW28XX_VIDEO                                                      07/14/2021 16:13:00 PAGE 3   

 117   2            return NONE_SYSTEM;
 118   2          
 119   2          tmpSta &= 0xE0;
 120   2          tmpSta >>= 5;
 121   2          return (tmpSta>3)  ? NTSC: PAL; 
 122   2      
 123   2          }
 124   1      #else
              //  DELAY_FOR(150);
                tmpSta = TW28_ReadByte(0, _ch << 4);
                if( 0x0F != (tmpSta & 0x0F))
                  return DEF_SYSTEM;
                tmpSta &= 0xE0;
                tmpSta >>= 5;
                return (tmpSta>3)  ? NTSC: PAL; 
              #endif//if 0
 133   1        //Kane Modified<<<<
 134   1      }
 135          
 136          // ===========================================================================
 137          //
 138          // Setting Video Format 
 139          //
 140          void PCT_SetVideoFormat(U8 _dvc, U8 _ch, U8 _fmat)
 141          {
 142   1        register U8 tmpSta, addr;
 143   1        
 144   1        _dvc = 0;
 145   1        addr = _ch << 4 | 0x01;
 146   1        tmpSta = TW28_ReadByte(0, addr);
 147   1        //Kane modified>>>>
 148   1        //tmpSta &= ~VIDEO_ADDR;
 149   1        tmpSta &= 0x8F;
 150   1        // Kane modified<<<<
 151   1        tmpSta |= _fmat;
 152   1        TW28_WriteByte(0, addr, tmpSta);
 153   1      }
 154          
 155          // ===========================================================================
 156          //
 157          // About X channel Video Mixing Control 
 158          //
 159          
 160          // Video Scale Setting
 161          void PCT_SetChanelScale(U8 _ch, WRITE_REG_DATA *datptr)
 162          {
 163   1        code U8 ScaleRgeAddr[]={0x83,0x84,0x81,0x82,
 164   1                    0x93,0x94,0x91,0x92,
 165   1                    0xA3,0xA4,0xA1,0xA2,
 166   1                    0xB3,0xB4,0xB1,0xB2,
 167   1        };
 168   1        U8  *addrptr;
 169   1        register U16 value;
 170   1      
 171   1        #define HB GETHBYTE(value)
 172   1        #define LB GETLBYTE(value)
 173   1        
 174   1        addrptr = ScaleRgeAddr+_ch*4;
 175   1        value = datptr->addr;
 176   1        if(value != 0xFFFF) value += H_FILTER;
 177   1        TW28_WriteByte(0, *addrptr++, HB);
 178   1        TW28_WriteByte(0, *addrptr++, LB);
C51 COMPILER V9.60.0.0   TW28XX_VIDEO                                                      07/14/2021 16:13:00 PAGE 4   

 179   1        datptr++;
 180   1        value = datptr->addr;
 181   1        TW28_WriteByte(0, *addrptr++, HB);
 182   1        TW28_WriteByte(0, *addrptr++, LB);
 183   1      }
 184          
 185          // Video scale Check 
 186          void PCT_SetVideoHDelay(U8 _typ, PU8 _winch, PU8 _cattr)
 187          {
 188   1        register U8 hdelay;
 189   1      //Kane @HS 2007 0806 Ver3.4>>>>
 190   1      //  if(Original_selwintype == _typ )//Kane @HS 2007 0724 Ver3.4
 191   1      //    return;
 192   1      ////Kane @HS 2007 0806 Ver3.4<<<<
 193   1        BYTE* ptr_Video_HDelay;
 194   1      
 195   1      if(TW2837IDCheck==TRUE)
 196   1        ptr_Video_HDelay=&Video_HDelay37[0];
 197   1      else
 198   1        ptr_Video_HDelay=&Video_HDelay[0];
 199   1      
 200   1        switch(_typ){
 201   2          case VMIX_TYPE_N11:
 202   2          case VMIX_TYPE_P11:
 203   2          //Kane @HS 2007 0806 Ver3.4>>>> 
 204   2            //if(Original_selwintype == _typ)//Kane @HS 2007 0724 Ver3.4
 205   2            //break;
 206   2          //Kane @HS 2007 0806 Ver3.4<<<<
 207   2            hdelay = 0x08|SYSTYPE;
 208   2            hdelay |= (_cattr[0]&0x01)<<1;
 209   2            if(_winch[0]&0x01)
 210   2              hdelay |= WIN_RIGHT;  // Signal Channel 1,3
 211   2            else
 212   2              hdelay |= WIN_LEFT;   // Signal Channel 0,2
 213   2            if(TW28_ReadByte(0, (_winch[0]<<4)|0x02) != ptr_Video_HDelay[hdelay])//Kane @HS 2007 0808 Ver3.4
 214   2              TW28_WriteByte(0, (_winch[0]<<4)|0x02,ptr_Video_HDelay[hdelay]);
 215   2            break;
 216   2      
 217   2          case VMIX_TYPE_N21://andy
 218   2          case VMIX_TYPE_P21:
 219   2            // Type N,L,R
 220   2            hdelay = 0x08|WIN_RIGHT|SYSTYPE;  // WIN_RIGHT for Y Channel LEFT
 221   2            hdelay |= (_cattr[0]&0x01)<<1;
 222   2            if(TW28_ReadByte(0, (_winch[0]<<4)|0x02) != ptr_Video_HDelay[hdelay])//Kane @HS 2007 0808 Ver3.4
 223   2              TW28_WriteByte(0, (_winch[0]<<4)|0x02,ptr_Video_HDelay[hdelay]);
 224   2            // LEFT 
 225   2            hdelay = 0x08|WIN_LEFT|SYSTYPE; // WIN_RIGHT for Y Channel LEFT
 226   2            hdelay |= (_cattr[1]&0x01)<<1;
 227   2            if(TW28_ReadByte(0, (_winch[1]<<4)|0x02) != ptr_Video_HDelay[hdelay])//Kane @HS 2007 0808 Ver3.4
 228   2              TW28_WriteByte(0, (_winch[1]<<4)|0x02,ptr_Video_HDelay[hdelay]);
 229   2            
 230   2            break;
 231   2      
 232   2          case VMIX_TYPE_N22:
 233   2          case VMIX_TYPE_P22:
 234   2            // LEFT 
 235   2            hdelay = WIN_LEFT|SYSTYPE;
 236   2            hdelay |= (_cattr[0]&0x01)<<1;
 237   2            if(TW28_ReadByte(0,( _winch[0]<<4)|0x02) != ptr_Video_HDelay[hdelay])//Kane @HS 2007 0808 Ver3.4
 238   2              TW28_WriteByte(0, (_winch[0]<<4)|0x02,ptr_Video_HDelay[hdelay]);
 239   2            // RIGHT
 240   2            hdelay = WIN_RIGHT|SYSTYPE;
C51 COMPILER V9.60.0.0   TW28XX_VIDEO                                                      07/14/2021 16:13:00 PAGE 5   

 241   2            hdelay |= (_cattr[1]&0x01)<<1;
 242   2            if(TW28_ReadByte(0, (_winch[1]<<4)|0x02) != ptr_Video_HDelay[hdelay])//Kane @HS 2007 0808 Ver3.4
 243   2              TW28_WriteByte(0, (_winch[1]<<4)|0x02,ptr_Video_HDelay[hdelay]);
 244   2            break;
 245   2            
 246   2          case VMIX_TYPE_N31:
 247   2          case VMIX_TYPE_P31:
 248   2            // Type N,L,R
 249   2            hdelay = 0x08|WIN_RIGHT|SYSTYPE;  // WIN_RIGHT for Y Channel LEFT
 250   2            hdelay |= (_cattr[0]&0x01)<<1;
 251   2            if(TW28_ReadByte(0, (_winch[0]<<4)|0x02) != ptr_Video_HDelay[hdelay])//Kane @HS 2007 0808 Ver3.4
 252   2              TW28_WriteByte(0, (_winch[0]<<4)|0x02,ptr_Video_HDelay[hdelay]);
 253   2            // LEFT 
 254   2            hdelay = WIN_LEFT|SYSTYPE;
 255   2            hdelay |= (_cattr[1]&0x01)<<1;
 256   2            if(TW28_ReadByte(0, (_winch[1]<<4)|0x02) != ptr_Video_HDelay[hdelay])//Kane @HS 2007 0808 Ver3.4
 257   2              TW28_WriteByte(0, (_winch[1]<<4)|0x02,ptr_Video_HDelay[hdelay]);
 258   2            // RIGHT
 259   2            hdelay = WIN_RIGHT|SYSTYPE;
 260   2            hdelay |= (_cattr[2]&0x01)<<1;
 261   2            if(TW28_ReadByte(0, (_winch[2]<<4)|0x02) != ptr_Video_HDelay[hdelay])//Kane @HS 2007 0808 Ver3.4
 262   2              TW28_WriteByte(0, (_winch[2]<<4)|0x02,ptr_Video_HDelay[hdelay]);
 263   2            break;
 264   2      
 265   2          case VMIX_TYPE_N32:
 266   2          case VMIX_TYPE_P32:
 267   2            break;
 268   2      
 269   2          case VMIX_TYPE_N33:
 270   2          case VMIX_TYPE_P33:
 271   2            // Type L,R,R
 272   2            // LEFT 
 273   2            hdelay = WIN_LEFT|SYSTYPE;
 274   2            hdelay |= (_cattr[0]&0x01)<<1;
 275   2            if(TW28_ReadByte(0, (_winch[0]<<4)|0x02) != ptr_Video_HDelay[hdelay])//Kane @HS 2007 0808 Ver3.4
 276   2              TW28_WriteByte(0, (_winch[0]<<4)|0x02,ptr_Video_HDelay[hdelay]);
 277   2            // RIGHT
 278   2            hdelay = WIN_RIGHT|SYSTYPE;
 279   2            hdelay |= (_cattr[1]&0x01)<<1;
 280   2            if(TW28_ReadByte(0, (_winch[1]<<4)|0x02) != ptr_Video_HDelay[hdelay])//Kane @HS 2007 0808 Ver3.4
 281   2              TW28_WriteByte(0, (_winch[1]<<4)|0x02,ptr_Video_HDelay[hdelay]);
 282   2            // RIGHT
 283   2            hdelay = WIN_RIGHT|SYSTYPE;
 284   2            hdelay |= (_cattr[2]&0x01)<<1;
 285   2            if(TW28_ReadByte(0,( _winch[2]<<4)|0x02) != ptr_Video_HDelay[hdelay])//Kane @HS 2007 0808 Ver3.4
 286   2            TW28_WriteByte(0, (_winch[2]<<4)|0x02,ptr_Video_HDelay[hdelay]);
 287   2            break;
 288   2      
 289   2          case VMIX_TYPE_N34:
 290   2          case VMIX_TYPE_P34:
 291   2            // Type L,R,L
 292   2            // LEFT 
 293   2            hdelay = WIN_LEFT|SYSTYPE;
 294   2            hdelay |= (_cattr[0]&0x01)<<1;
 295   2            if(TW28_ReadByte(0, (_winch[0]<<4)|0x02) != ptr_Video_HDelay[hdelay])//Kane @HS 2007 0808 Ver3.4
 296   2              TW28_WriteByte(0, (_winch[0]<<4)|0x02,ptr_Video_HDelay[hdelay]);
 297   2            // RIGHT
 298   2            hdelay = WIN_RIGHT|SYSTYPE;
 299   2            hdelay |= (_cattr[1]&0x01)<<1;
 300   2            if(TW28_ReadByte(0, (_winch[1]<<4)|0x02) != ptr_Video_HDelay[hdelay])//Kane @HS 2007 0808 Ver3.4
 301   2              TW28_WriteByte(0, (_winch[1]<<4)|0x02,ptr_Video_HDelay[hdelay]);
 302   2            //Left
C51 COMPILER V9.60.0.0   TW28XX_VIDEO                                                      07/14/2021 16:13:00 PAGE 6   

 303   2            hdelay = WIN_LEFT|SYSTYPE;
 304   2            hdelay |= (_cattr[2]&0x01)<<1;
 305   2            if(TW28_ReadByte(0, (_winch[2]<<4)|0x02) != ptr_Video_HDelay[hdelay])//Kane @HS 2007 0808 Ver3.4
 306   2              TW28_WriteByte(0, (_winch[2]<<4)|0x02,ptr_Video_HDelay[hdelay]);
 307   2            break;
 308   2            
 309   2          case VMIX_TYPE_N41:
 310   2          case VMIX_TYPE_P41:
 311   2            // Type L,R,L,R
 312   2            // LEFT 
 313   2            hdelay = WIN_LEFT|SYSTYPE;
 314   2            hdelay |= (_cattr[0]&0x01)<<1;
 315   2            if(TW28_ReadByte(0, (_winch[0]<<4)|0x02) != ptr_Video_HDelay[hdelay])//Kane @HS 2007 0808 Ver3.4
 316   2              TW28_WriteByte(0, (_winch[0]<<4)|0x02,ptr_Video_HDelay[hdelay]);
 317   2            // RIGHT
 318   2            hdelay = WIN_RIGHT|SYSTYPE;
 319   2            hdelay |= (_cattr[1]&0x01)<<1;
 320   2            if(TW28_ReadByte(0,( _winch[1]<<4)|0x02) != ptr_Video_HDelay[hdelay])//Kane @HS 2007 0808 Ver3.4
 321   2              TW28_WriteByte(0, (_winch[1]<<4)|0x02,ptr_Video_HDelay[hdelay]);
 322   2            // Left
 323   2            hdelay = WIN_LEFT|SYSTYPE;
 324   2            hdelay |= (_cattr[2]&0x01)<<1;
 325   2            if(TW28_ReadByte(0, (_winch[2]<<4)|0x02) != ptr_Video_HDelay[hdelay])//Kane @HS 2007 0808 Ver3.4
 326   2              TW28_WriteByte(0, (_winch[2]<<4)|0x02,ptr_Video_HDelay[hdelay]);
 327   2            // RIGHT
 328   2            hdelay = WIN_RIGHT|SYSTYPE;
 329   2            hdelay |= (_cattr[3]&0x01)<<1;
 330   2            if(TW28_ReadByte(0, (_winch[3]<<4)|0x02) != ptr_Video_HDelay[hdelay])//Kane @HS 2007 0808 Ver3.4
 331   2              TW28_WriteByte(0, (_winch[3]<<4)|0x02,ptr_Video_HDelay[hdelay]);
 332   2            break;
 333   2      
 334   2          default :
 335   2            break;
 336   2        }
 337   1      }
 338          
 339          // X Channel Video Mixing Control
 340          void PCT_SetXVideoMixing(U8 _typ, PU8 _winch)
 341          {
 342   1        WRITE_REG_DATA *wregptr;
 343   1      
 344   1        TW28_WriteByte(1, 0x10, (_winch[0]&0x03)|0x80);
 345   1        TW28_WriteByte(1, 0x18, (_winch[1]&0x03)|0x80);
 346   1        TW28_WriteByte(1, 0x20, (_winch[2]&0x03)|0x80);
 347   1        TW28_WriteByte(1, 0x28, (_winch[3]&0x03)|0x80);
 348   1      
 349   1        switch(_typ){
 350   2          case VMIX_TYPE_N11:
 351   2          case VMIX_TYPE_P11:
 352   2            //if(Original_selwintype == _typ)//Kane @HS 2007 0724 Ver3.4
 353   2            //break;
 354   2      
 355   2            wregptr = Init_Vido_W1+SYSTYPE*19;
 356   2            PCT_SetChanelScale(_winch[0], wregptr);
 357   2            TW28_WriteSTable(0, wregptr+2);
 358   2            break;
 359   2      
 360   2          case VMIX_TYPE_N21:
 361   2          case VMIX_TYPE_N22:
 362   2          case VMIX_TYPE_P21:
 363   2          case VMIX_TYPE_P22:
 364   2            wregptr = Init_Vido_W2+SYSTYPE*TYPE2_OFSET*2;
C51 COMPILER V9.60.0.0   TW28XX_VIDEO                                                      07/14/2021 16:13:00 PAGE 7   

 365   2            wregptr += ((_typ&0x0F)-1)*TYPE2_OFSET;
 366   2      
 367   2            PCT_SetChanelScale(_winch[0], wregptr);
 368   2            PCT_SetChanelScale(_winch[1], wregptr);
 369   2            TW28_WriteSTable(0, wregptr+2);
 370   2            break;
 371   2      
 372   2          case VMIX_TYPE_N31:
 373   2          case VMIX_TYPE_N32:
 374   2          case VMIX_TYPE_N33:
 375   2          case VMIX_TYPE_N34:
 376   2          case VMIX_TYPE_P31:
 377   2          case VMIX_TYPE_P32:
 378   2          case VMIX_TYPE_P33:
 379   2          case VMIX_TYPE_P34:
 380   2            wregptr = Init_Vido_W3+SYSTYPE*TYPE3_OFSET*4;
 381   2            wregptr += ((_typ&0x0F)-1)*TYPE3_OFSET;
 382   2      
 383   2            PCT_SetChanelScale(_winch[0], wregptr+0);
 384   2            PCT_SetChanelScale(_winch[1], wregptr+2);
 385   2            PCT_SetChanelScale(_winch[2], wregptr+4);
 386   2            TW28_WriteSTable(0, wregptr+6);
 387   2            break;
 388   2      
 389   2          case VMIX_TYPE_N41:
 390   2          case VMIX_TYPE_P41:
 391   2            wregptr = Init_Vido_W4+SYSTYPE*19;
 392   2            PCT_SetChanelScale(_winch[0], wregptr);
 393   2            PCT_SetChanelScale(_winch[1], wregptr);
 394   2            PCT_SetChanelScale(_winch[2], wregptr);
 395   2            PCT_SetChanelScale(_winch[3], wregptr);
 396   2            TW28_WriteSTable(0, wregptr+2);
 397   2            break;
 398   2      
 399   2          default :
 400   2            break;
 401   2        }
 402   1      }
 403          
 404          // ===========================================================================
 405          //
 406          // About Y channel Video Mixing Control 
 407          //
 408          void PCT_SetYVideoMixing(U8 _typ)
 409          {
 410   1        TW28_WriteSTable(0, Init_Vido_Y + _typ * YTYPE_OFSET);
 411   1      }
 412          
 413          // About Y channel Video Hdelay 
 414          void PCT_RecompenseYHdelay (PU8 _chmiro)
 415          {
 416   1      
 417   1        BYTE* ptr_Video_HDelay;
 418   1      
 419   1        if(TW2837IDCheck==TRUE)
 420   1          ptr_Video_HDelay=&Video_HDelay37[0];
 421   1        else
 422   1          ptr_Video_HDelay=&Video_HDelay[0];
 423   1        
 424   1      
 425   1        switch(TW28_ReadByte(0x01, 0x6C)){
 426   2        case 0x00:
C51 COMPILER V9.60.0.0   TW28XX_VIDEO                                                      07/14/2021 16:13:00 PAGE 8   

 427   2          
 428   2          if(TW28_ReadByte(0, 0x02) != ptr_Video_HDelay[WIN_LEFT+((_chmiro[0]&BIT0)<<1)+SYSTYPE])//Kane @HS 2007 0
             -808 Ver3.4
 429   2            TW28_WriteByte(0x00, 0x02, ptr_Video_HDelay[WIN_LEFT+((_chmiro[0]&BIT0)<<1)+SYSTYPE]);
 430   2          if(TW28_ReadByte(0, 0x12) != ptr_Video_HDelay[WIN_RIGHT+((_chmiro[1]&BIT0)<<1)+SYSTYPE])//Kane @HS 2007 
             -0808 Ver3.4
 431   2            TW28_WriteByte(0x00, 0x12, ptr_Video_HDelay[WIN_RIGHT+((_chmiro[1]&BIT0)<<1)+SYSTYPE]);
 432   2          if(TW28_ReadByte(0, 0x22) != ptr_Video_HDelay[WIN_LEFT+((_chmiro[2]&BIT0)<<1)+SYSTYPE])//Kane @HS 2007 0
             -808 Ver3.4
 433   2            TW28_WriteByte(0x00, 0x22, ptr_Video_HDelay[WIN_LEFT+((_chmiro[2]&BIT0)<<1)+SYSTYPE]);
 434   2          if(TW28_ReadByte(0, 0x32) != ptr_Video_HDelay[WIN_RIGHT+((_chmiro[3]&BIT0)<<1)+SYSTYPE])//Kane @HS 2007 
             -0808 Ver3.4
 435   2            TW28_WriteByte(0x00, 0x32, ptr_Video_HDelay[WIN_RIGHT+((_chmiro[3]&BIT0)<<1)+SYSTYPE]);
 436   2          break;
 437   2      
 438   2        case 0x03:
 439   2          if(TW28_ReadByte(0, 0x02) != ptr_Video_HDelay[0x08+((_chmiro[0]&BIT0)<<1)+SYSTYPE])//William @HS 2007 08
             -29 Ver3.4
 440   2            TW28_WriteByte(0x00, 0x02, ptr_Video_HDelay[0x08+((_chmiro[0]&BIT0)<<1)+SYSTYPE]);
 441   2          break;
 442   2          
 443   2        case 0x0C:
 444   2          if(TW28_ReadByte(0, 0x12) != ptr_Video_HDelay[0x08+((_chmiro[1]&BIT0)<<1)+SYSTYPE])//William @HS 2007 08
             -29 Ver3.4
 445   2            TW28_WriteByte(0x00, 0x12, ptr_Video_HDelay[0x08+((_chmiro[1]&BIT0)<<1)+SYSTYPE]);
 446   2          break;
 447   2          
 448   2        case 0x30:
 449   2          if(TW28_ReadByte(0, 0x22) != ptr_Video_HDelay[0x08+((_chmiro[2]&BIT0)<<1)+SYSTYPE])//William @HS 2007 08
             -29 Ver3.4
 450   2          TW28_WriteByte(0x00, 0x22, ptr_Video_HDelay[0x08+((_chmiro[2]&BIT0)<<1)+SYSTYPE]);
 451   2          break;
 452   2          
 453   2        case 0xC0:
 454   2          if(TW28_ReadByte(0, 0x32) !=ptr_Video_HDelay[0x08+((_chmiro[3]&BIT0)<<1)+SYSTYPE])//William @HS 2007 082
             -9 Ver3.4
 455   2          TW28_WriteByte(0x00, 0x32, ptr_Video_HDelay[0x08+((_chmiro[3]&BIT0)<<1)+SYSTYPE]);
 456   2          break;
 457   2        }
 458   1      }
 459          
 460          // ===========================================================================
 461          //
 462          //  TW2835 Video Mixing last Modify for AC & RB
 463          //
 464          //Kane @HS 2007 0808 Ver3.4>>>>
 465          #if 0  //Pinchi 20150324 disable for compiler warning
              void PCT_VideoLastModify(void)
              {
                register data U8 state=0;
                
                state += (SYSWINLK[0]&0x03);
                state += (SYSWINLK[1]&0x03)<<4;
                state += (SYSWINATTR[0]&BIT0)<<2;
                state += (SYSWINATTR[1]&BIT0)<<6;
              
                switch(state) {
                  case 0x20:
                  case 0x24:
                    TW28_WriteSTable(0, VidoW2_ModifyACNM);
                    break;
              
C51 COMPILER V9.60.0.0   TW28XX_VIDEO                                                      07/14/2021 16:13:00 PAGE 9   

                  case 0x60:
                  case 0x64:
                    //PCT_CheckSystem();      
                    if((SYSTYPE&BIT0) ==NTSC)//Kane @HS 2007 0813 Cer3.4
                      TW28_WriteSTable(0, VidoW2_ModifyACHM);
                    else
                      TW28_WriteSTable(0, VidoW2_ModifyACHM_PAL);
                    break;
              
                  case 0x13:
                  case 0x53:
                    PCT_WinPOPupCtrl(1);
                    TW28_WriteSTable(0, VidoW2_ModifyRBNM);
                    break;
                  case 0x17:
                  case 0x57:
                    PCT_WinPOPupCtrl(1);
                    TW28_WriteSTable(0, VidoW2_ModifyRBHM);
                    break;
                }
              }
              #endif
 503          
 504          //Kane @HS 2007 0808 Ver3.4<<<<
 505          // ===========================================================================
 506          //
 507          //  TW2835 Attribute Set about Freeze for X Channel                              
 508          //
 509          void PCT_WinAttrCtrl(U8 _wid, U8 _attrsel, U8 _setval)
 510          {
 511   1        #define PAGE GETHBYTE(XWinAttr_RegAddr[_wid])
 512   1        #define ADDR GETLBYTE(XWinAttr_RegAddr[_wid])
 513   1      
 514   1        register U8 dat;
 515   1      
 516   1        dat = TW28_ReadByte(PAGE, ADDR);
 517   1        _setval ? dat |= _attrsel : (dat &= ~_attrsel);
 518   1        TW28_WriteByte(PAGE, ADDR, dat);
 519   1      }
 520          
 521          // ===========================================================================
 522          //
 523          //  TW2835 Attribute Set about Freeze for X Channel                              
 524          //
 525          //extern void PutsP(BYTE * ptr);
 526          //extern void RS_tx(BYTE tx_buf);
 527          void PCT_WinAttrCtrlY(U8 _wid, U8 _attrsel, U8 _setval)
 528          {
 529   1        #define YPAGE GETHBYTE(YWinAttr_RegAddr[_wid])
 530   1        #define YADDR GETLBYTE(YWinAttr_RegAddr[_wid])
 531   1        register U8 dat;
 532   1        
 533   1        dat = TW28_ReadByte(YPAGE, YADDR);
 534   1        _setval ? dat |= _attrsel : (dat &= ~_attrsel);
 535   1        TW28_WriteByte(YPAGE, YADDR, dat);
 536   1      
 537   1      
 538   1      }
 539          
 540          // ===========================================================================
 541          //
 542          //  TW2835 Attribute Set about Freeze                              
C51 COMPILER V9.60.0.0   TW28XX_VIDEO                                                      07/14/2021 16:13:00 PAGE 10  

 543          //
 544          void PCT_WinAttrClear(U8 _attrsel)
 545          {
 546   1        #define PAGE GETHBYTE(XWinAttr_RegAddr[_wid])
 547   1        #define ADDR GETLBYTE(XWinAttr_RegAddr[_wid])
 548   1      
 549   1        register  U8 _wid;
 550   1        register  U8 dat;
 551   1      
 552   1        for(_wid=0; _wid<8; _wid++) {
 553   2          dat = TW28_ReadByte(PAGE, ADDR);
 554   2          dat &= ~_attrsel;
 555   2          TW28_WriteByte(PAGE, ADDR, dat);
 556   2        }
 557   1      }
 558          
 559          // ===========================================================================
 560          //
 561          // TW2835 Window POP UP 
 562          //
 563          #if 0  //Pinchi 20150324 disable for compiler warning
              void PCT_WinPOPupCtrl(U8 _wid)
              {
                #define POPPAGE GETHBYTE(XWinPOP_RegAddr[_wid])
                #define POPADDR GETLBYTE(XWinPOP_RegAddr[_wid])
              
                register  U8 dat;
              
                dat = TW28_ReadByte(POPPAGE, POPADDR);
                dat |= BIT6;
                TW28_WriteByte(POPPAGE, POPADDR, dat);
              }
              #endif
 576          
 577          // ===========================================================================
 578          // END of File 
 579          // ===========================================================================
 580          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2604    ----
   CONSTANT SIZE    =   1123    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----      45
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
